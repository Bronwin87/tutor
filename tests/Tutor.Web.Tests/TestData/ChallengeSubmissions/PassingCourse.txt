using System.Collections.Generic;

namespace Naming.Domain
{
    /// <summary>
    /// ID izazova je dostupan na web prikazu.
    /// ** Nemoj da modifikuješ naziv namespace-a, Run klase i zaglavlja metoda ove klase. **
    /// 1. Identifikuj i preimenuj sve nejasne nazive tako da koriste domensku terminologiju.
    /// 2. Instrukcije "c.Status.Equals("enrolled") || c.Status.Equals("current")" možemo izdvojiti u zasebnu metodu
    ///     čiji naziv objašnjava značenje ove logike. Napravi ovakvu funkciju i dodeli joj domenski značajan naziv.
    /// </summary>
    class CourseService
    {
        private const int MaximumActiveCourses = 6;
        public void Enroll(Course newCourse, Student student)
        {
            var numberOfActiveCourses = CountActiveCourses(student);
            if (IsUnderMaxCourseLimit(numberOfActiveCourses))
            {
                student.ActiveCourses.Add(newCourse);
            }
        }

        private static bool IsUnderMaxCourseLimit(int activeCourses)
        {
            return activeCourses < MaximumActiveCourses;
        }

        private static int CountActiveCourses(Student student)
        {
            int i = 0;
            foreach (var c in student.ActiveCourses)
            {
                if (IsActive(c)) i++;
            }

            return i;
        }

        private static bool IsActive(Course c)
        {
            return c.Status.Equals("enrolled") || c.Status.Equals("current");
        }
    }

    public class Course
    {
        public string Status { get; set; }
    }

    public class Student
    {
        public List<Course> Courses { get; set; } = new List<Course>();
    }

    #region Run
    public class Run
    {
        private readonly Student _student = new Student();
        private readonly CourseService _service = new CourseService();

        public Run()
        {
            _service.Add(new Course { Status = "enrolled" }, _student);
            _service.Add(new Course { Status = "current" }, _student);
            _service.Add(new Course { Status = "enrolled" }, _student);
            _service.Add(new Course { Status = "current" }, _student);
            _service.Add(new Course { Status = "current" }, _student);
        }

        public void AddCourse()
        {
            _service.Add(new Course { Status = "enrolled" }, _student);
        }

        public int Count()
        {
            return _student.Courses.Count;
        }
    }
    #endregion
}